name: ci

on:
  workflow_call:
    inputs:
      pnpmPath:
        required: true
        type: string
      pnpmKeysPrefix:
        required: true
        type: string
      flags:
        required: true
        type: string
    outputs:
      isBuildPassed:
        value: ${{jobs.variables.outputs.isBuildPassed}}
      isLintPassed:
        value: ${{jobs.variables.outputs.isLintPassed}}
      isPrettierPassed:
        value: ${{jobs.variables.outputs.isPrettierPassed}}
      isDatabasePassed:
        value: ${{jobs.variables.outputs.isDatabasePassed}}
      isPassed:
        value: ${{jobs.variables.outputs.isPassed}}

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: nrwl/nx-set-shas@v3

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Fetching git
        run: git fetch

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ github.event.inputs.pnpmPath }}
          key: ${{ github.event.inputs.pnpmKeysPrefix }}${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ github.event.inputs.pnpmKeysPrefix }}

      - name: Install dependencies
        run: pnpm install

      - name: Install dependencies
        run: echo ${{ github.event.inputs }}

      - name: Install NX
        run: pnpm install -g nx

      - name: Code style
        id: format
        run: nx format:check ${{ github.event.inputs.flags }}

      - name: Lint
        id: lint
        run: nx affected --target=lint ${{ github.event.inputs.flags }}

      - name: Prisma Generation
        id: db
        run: nx generate-types db

      - name: Build
        id: build
        run: nx affected --target=build ${{ github.event.inputs.flags }}

    outputs:
      isBuildPassed: ${{steps.build.outcome == 'success'}}
      isLintPassed: ${{steps.lint.outcome == 'success'}}
      isPrettierPassed: ${{steps.format.outcome == 'success'}}
      isDatabasePassed: ${{steps.db.outcome == 'success'}}
      isPassed: ${{steps.build.outcome == 'success' && steps.lint.outcome == 'success' && steps.db.outcome == 'success' && steps.format.outcome == 'success'}}
